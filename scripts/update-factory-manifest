#!/bin/sh
# -*- mode: shell-script-mode; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2019 Foundries.io
#
# SPDX-License-Identifier: Apache-2.0
#

# set defaults
foundries_manifest="https://github.com/foundriesio/lmp-manifest"
latest=${1}

# break on errors
set -e

abort_merge()
{
    errno=${1}
    git merge --abort || true
    echo ""
    echo "Unable to perform automatic update.  Restoring previous state."

    if [ "${errno}" != "128" ]; then
        echo ""
        echo "One of these last few commits is probably causing a conflict:"
        git log --no-merges --max-count=10 --format=oneline FETCH_HEAD..HEAD
    fi
    exit 1
}

# get current branch
local_branch=$(git rev-parse --abbrev-ref HEAD)

# look for a remote tracking branch
remote_branch=$(git config --get branch.${local_branch}.merge || true)
if [ -z "${remote_branch}" ]; then
    # if local_branch is "default" and pwd is a repo checkout:
    # the remote branch can default to master, otherwise abort
    local_dir=$(pwd)
    if [ "${local_branch}" = "default" ] && [ -z "${local_dir##*".repo/manifests"*}" ]; then
        remote_branch="refs/heads/master"
    else
        echo "fatal: The current branch has no upstream branch."
        echo "To set the upstream tracking branch, use: git branch -u <remote>/<branch>"
        exit 1
    fi
fi

# fetch tags from upstream
git fetch --tags --quiet ${foundries_manifest}

# if no tag parameter was supplied use latest upstream tag
if [ -z "${latest}" ]; then
    # assign last upstream tag to latest
    latest=$(git tag --list --points-at FETCH_HEAD)
fi

# check to see if last upstream tag is already included in HEAD (if so exit)
errno=0
git merge-base --is-ancestor ${latest} HEAD || errno=$?
# found tag as ancestor, no updates
if [ "${errno}" -eq 0 ]; then
    echo "No new releases found upstream"
    exit 0
# unhandled error (invalid object name)
elif [ "${errno}" -gt 1 ]; then
    exit 1
fi

echo "New upstream release(s) have been found."
echo "Merging local code with upstream release: ${latest}"

# merge to the last upstream tag
git merge --no-edit -m "update-manifest: merge LmP ${latest}" ${latest} || abort_merge $?

echo ""
echo "Automatic update successful!"

git push origin HEAD:${remote_branch} && git push --tags origin
